@using InventoryManagementMVC.Models.ViewModels
@using InventoryManagementMVC.Models.Entities
@model BonCreateViewModel

@{
    ViewData["Title"] = "Nouveau Bon d'Entrée";
    var fournisseurs = ViewBag.Fournisseurs as List<Fournisseur> ?? new List<Fournisseur>();
    var produits = ViewBag.Produits as List<Produit> ?? new List<Produit>();
}

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="fas fa-plus-circle me-2"></i>Nouveau Bon d'Entrée</h2>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>Retour à la liste
            </a>
        </div>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <h5><i class="fas fa-exclamation-triangle me-2"></i>Erreurs de validation</h5>
                <ul class="mb-0">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        <form asp-action="Create" method="post" id="bonForm">
            @Html.AntiForgeryToken()
            
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Informations générales</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="FournisseurId" class="form-label">
                                    <i class="fas fa-building me-1"></i>Fournisseur *
                                </label>
                                <select asp-for="FournisseurId" class="form-select" required>
                                    <option value="">Sélectionner un fournisseur</option>
                                    @foreach (var fournisseur in fournisseurs)
                                    {
                                        <option value="@fournisseur.Id">@fournisseur.Nom</option>
                                    }
                                </select>
                                <span asp-validation-for="FournisseurId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">
                                    <i class="fas fa-calendar me-1"></i>Date
                                </label>
                                <input type="text" class="form-control" value="@DateTime.Now.ToString("dd/MM/yyyy")" readonly />
                                <small class="form-text text-muted">Date automatique</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-list me-2"></i>Articles</h5>
                        <button type="button" class="btn btn-light btn-sm" onclick="ajouterLigne()">
                            <i class="fas fa-plus me-1"></i>Ajouter un article
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="lignesContainer">
                        <!-- Les lignes seront ajoutées ici dynamiquement -->
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <div class="alert alert-info d-none" id="totalAlert">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-calculator me-2"></i>Total du bon :</span>
                                    <strong id="totalGeneral">0,00 €</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-times me-1"></i>Annuler
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn" disabled>
                            <i class="fas fa-save me-1"></i>Créer le bon d'entrée
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let ligneIndex = 0;
        const produits = @Html.Raw(Json.Serialize(produits.Select(p => new { 
            id = p.IdProduit, 
            libelle = p.Libelle, 
            prix = p.PrixUnitaire, 
            stock = p.QuantiteStock,
            categorie = p.Categorie?.Nom ?? "Sans catégorie"
        })));

        function ajouterLigne() {
            const container = document.getElementById('lignesContainer');
            const ligneHtml = `
                <div class="ligne-produit border rounded p-3 mb-3" data-index="${ligneIndex}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Article #${ligneIndex + 1}</h6>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="supprimerLigne(${ligneIndex})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Produit *</label>
                            <select name="Lignes[${ligneIndex}].IdProduit" class="form-select produit-select" required onchange="updateProduitInfo(${ligneIndex})">
                                <option value="">Sélectionner un produit</option>
                                ${produits.map(p => `<option value="${p.id}" data-prix="${p.prix}" data-stock="${p.stock}" data-categorie="${p.categorie}">${p.libelle}</option>`).join('')}
                            </select>
                            <small class="form-text text-muted produit-info"></small>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Quantité *</label>
                            <input type="number" name="Lignes[${ligneIndex}].Quantite" class="form-control quantite-input" min="1" required onchange="calculerTotal(${ligneIndex})">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Prix unitaire *</label>
                            <input type="number" name="Lignes[${ligneIndex}].PrixUnitaire" class="form-control prix-input" step="0.01" min="0.01" required onchange="calculerTotal(${ligneIndex})">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Total</label>
                            <input type="text" class="form-control total-ligne" readonly>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', ligneHtml);
            ligneIndex++;
            verifierFormulaire();
        }

        function supprimerLigne(index) {
            const ligne = document.querySelector(`[data-index="${index}"]`);
            if (ligne) {
                ligne.remove();
                calculerTotalGeneral();
                verifierFormulaire();
            }
        }

        function updateProduitInfo(index) {
            const select = document.querySelector(`[data-index="${index}"] .produit-select`);
            const selectedOption = select.options[select.selectedIndex];
            const infoDiv = document.querySelector(`[data-index="${index}"] .produit-info`);
            const prixInput = document.querySelector(`[data-index="${index}"] .prix-input`);
            
            if (selectedOption.value) {
                const prix = selectedOption.dataset.prix;
                const stock = selectedOption.dataset.stock;
                const categorie = selectedOption.dataset.categorie;
                
                prixInput.value = prix;
                infoDiv.innerHTML = `Catégorie: ${categorie} | Stock actuel: ${stock}`;
                infoDiv.className = 'form-text text-info';
                
                calculerTotal(index);
            } else {
                prixInput.value = '';
                infoDiv.innerHTML = '';
            }
        }

        function calculerTotal(index) {
            const ligne = document.querySelector(`[data-index="${index}"]`);
            const quantite = parseFloat(ligne.querySelector('.quantite-input').value) || 0;
            const prix = parseFloat(ligne.querySelector('.prix-input').value) || 0;
            const total = quantite * prix;
            
            ligne.querySelector('.total-ligne').value = total.toFixed(2) + ' €';
            calculerTotalGeneral();
        }

        function calculerTotalGeneral() {
            const lignes = document.querySelectorAll('.ligne-produit');
            let total = 0;
            
            lignes.forEach(ligne => {
                const quantite = parseFloat(ligne.querySelector('.quantite-input').value) || 0;
                const prix = parseFloat(ligne.querySelector('.prix-input').value) || 0;
                total += quantite * prix;
            });
            
            document.getElementById('totalGeneral').textContent = total.toFixed(2) + ' €';
            
            if (total > 0) {
                document.getElementById('totalAlert').classList.remove('d-none');
            } else {
                document.getElementById('totalAlert').classList.add('d-none');
            }
        }

        function verifierFormulaire() {
            const fournisseur = document.querySelector('[name="FournisseurId"]').value;
            const lignes = document.querySelectorAll('.ligne-produit');
            const submitBtn = document.getElementById('submitBtn');
            
            let formulaireValide = fournisseur && lignes.length > 0;
            
            if (formulaireValide) {
                lignes.forEach(ligne => {
                    const produit = ligne.querySelector('.produit-select').value;
                    const quantite = ligne.querySelector('.quantite-input').value;
                    const prix = ligne.querySelector('.prix-input').value;
                    
                    if (!produit || !quantite || !prix || quantite <= 0 || prix <= 0) {
                        formulaireValide = false;
                    }
                });
            }
            
            submitBtn.disabled = !formulaireValide;
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            ajouterLigne(); // Ajouter une première ligne
            
            document.querySelector('[name="FournisseurId"]').addEventListener('change', verifierFormulaire);
            
            // Délégation d'événements pour les inputs dynamiques
            document.getElementById('lignesContainer').addEventListener('input', function(e) {
                if (e.target.matches('.quantite-input, .prix-input')) {
                    verifierFormulaire();
                }
            });
        });
    </script>
}
